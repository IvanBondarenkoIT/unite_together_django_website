"""
Django settings for unite_together_django_website project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", cast=bool, default=True)
USE_REMOTE_DB_SETTINGS = config("USE_REMOTE_DB_SETTINGS", cast=bool, default=False)
REMOTE_DB_SERVICE = config("REMOTE_DB_SERVICE", default="AWS")

ALLOWED_HOSTS = [
    "*",
]

# CSRF_TRUSTED_ORIGINS = [""]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # "import_export",
    "paypal.standard.ipn",
    "web_pages",
    "homepage",
    "accounts",
    "donate",
    "storages",
    "persons",
    "about_us",
    "coordination",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "unite_together_django_website.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "web_pages.context_processors.menu_links",
            ],
        },
    },
]

WSGI_APPLICATION = "unite_together_django_website.wsgi.application"

AUTH_USER_MODEL = "accounts.Account"


# Database Configuration
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


if "RDS_DB_NAME" in os.environ:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ["RDS_DB_NAME"],
            "USER": os.environ["RDS_USERNAME"],
            "PASSWORD": os.environ["RDS_PASSWORD"],
            "HOST": os.environ["RDS_HOSTNAME"],
            "PORT": os.environ["RDS_PORT"],
        }
    }
else:
    if USE_REMOTE_DB_SETTINGS:
        print(REMOTE_DB_SERVICE)
        if REMOTE_DB_SERVICE == "AWS":
            DATABASES = {
                "default": {
                    "ENGINE": "django.db.backends.postgresql",
                    "NAME": config("RDS_DB_NAME"),
                    "USER": config("RDS_USERNAME"),
                    "PASSWORD": config("RDS_PASSWORD"),
                    "HOST": config("RDS_HOSTNAME"),
                    "PORT": config("RDS_PORT"),
                }
            }
        else:
            DATABASES = {
                "default": {
                    "ENGINE": "django.db.backends.postgresql",
                    "NAME": config("AZURE_RDS_DB_NAME"),
                    "USER": config("AZURE_RDS_USERNAME"),
                    "PASSWORD": config("AZURE_RDS_PASSWORD"),
                    "HOST": config("AZURE_RDS_HOSTNAME"),
                    "PORT": config("AZURE_RDS_PORT"),
                }
            }
    else:
        # Sqlit settings
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "unite_together_django_website.validators.CustomPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Date and time formats

# DATE_FORMAT = "d.m.Y"  # Example: 31.12.2024
# DATETIME_FORMAT = "d.m.Y H:i"  # Example: 31.12.2024 23:59
# TIME_FORMAT = "H:i"  # Example: 23:59
#
# # Input formats for parsing dates
#
# DATE_INPUT_FORMATS = [
#     "%d.%m.%Y",  # Example: 31.12.2024
# ]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Local staticfiles settings
# STATIC_URL = "static/"
# STATIC_ROOT = os.path.join(BASE_DIR, "static")
# STATICFILES_DIRS = ["unite_together_django_website/static"]

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(
    BASE_DIR, "staticfiles"
)  # Измените на "staticfiles" для лучшей практики
STATICFILES_DIRS = [os.path.join(BASE_DIR, "unite_together_django_website/static")]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# AWS S3 Static Files Configuration
# AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
# AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
# AWS_S3_OBJECT_PARAMETERS = {
#     'CacheControl': 'max-age=86400',
# }
# AWS_S3_FILE_OVERWRITE = False
# AWS_DEFAULT_ACL = 'public-read'
# AWS_LOCATION = 'static'
#
# STATICFILES_DIRS = [
#     'unite_together_django_website/static',
# ]
# STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


# media files configurations
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# SMTP configuration

EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT")
EMAIL_HOST_USER = config("EMAIL_ADMIN")
EMAIL_HOST_PASSWORD = config("EMAIL_PASSWORD")
EMAIL_USE_TLS = True

# PayPal configuration

PAYPAL_RECEIVER_EMAIL = config("PAYPAL_RECEIVER_EMAIL")  # where cash is paid into
PAYPAL_TEST = config("PAYPAL_TEST", cast=bool)
PRODUCT_ID = config("PAYPAL_ITEM_NAME")
PRODUCT_PRICE = config("PAYPAL_SUM")
